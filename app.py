# -*- coding: utf-8 -*-
import dash
import dash_core_components as dcc
import dash_html_components as html
# from dash.dependencies import Input, Output
#
# import plotly.plotly as py
# import plotly.graph_objs as go
#
# import pandas as pd
# import numpy as np
# from datetime import datetime
# import pandas_datareader.data as web

from footer import create_footer

# test imports
# import json

external_css = [
    # dash stylesheet
    'https://codepen.io/chriddyp/pen/bWLwgP.css',
    'https://maxcdn.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css',
    'https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css'
]


# Parameters


'''
Build the App
'''

app = dash.Dash()
server = app.server

# used when assigning callbacks to components that are generated by other callbacks (and therefore not in the initial layout), then you can suppress this exception by setting
app.config['suppress_callback_exceptions'] = True


app.layout = html.Div(children=[
    html.Div([
        html.H1(children='San Fran Police Reports', style={'display': 'inline-block'}),
    ],),

    dcc.Markdown('''

        [San Francisco Police data](https://cloud.google.com/bigquery/public-data/sfpd-reports).

        ***
        '''.replace('  ', ''), className='container',
                 containerProps={'style': {'maxWidth': '650px'}}),

    html.Div([
        html.Iframe(srcDoc=open('JupyterNotebooks/heatmap_withtime_SFPD.html', 'r').read(),
                    style={'border': 'none', 'width': '50%', 'height': 500, 'display': 'inline-block'}),
        html.Iframe(srcDoc=open('JupyterNotebooks/popup_SFPD.html', 'r').read(),
                    style={'border': 'none', 'width': '50%', 'height': 500, 'display': 'inline-block'}),
    ],

    ),
    create_footer()
])


# Choose the CSS styly you like
for css in external_css:
    app.css.append_css({'external_url': css})

if __name__ == '__main__':
    app.run_server(debug=True)
